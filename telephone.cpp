table,tableq = {},{} totl,totq = 0,0 #creating empty hash table def create(b): for i in range(b): table[i] = None tableq[i] = None #Linear probing insert function def linsert(key,b): global totl hash = key%b flag = 0 if table[hash]==None: table[hash]=key else: for i in range(0,b): hash = (key+i)%b if table[hash]==None: table[hash]=key totl += 1 flag += 1 break if flag == 0: print("Table Full or Key not probed.") print(key, " is inserted at location ", hash)
#Quadratic probing insert function def qinsert(key,b): global totq hash = key%b flag = 0 if tableq[hash]==None: tableq[hash]=key else: for i in range(0,int((b-1)/2)): hash = (key+(i*i))%b if tableq[hash]==None: tableq[hash]=key totq += 1 flag += 1 break if flag == 0: print("Table Full or Key not probed.") print(key, " is inserted at location ", hash)
#Linear probing search function def lsearch(key,b): hash = key%b flag = 0
if tableq[hash]==None:
print("Key : ",key," is not present.") else: for i in range(0,int((b-1)/2)): hash = (key+(i*i))%b if tableq[hash]==None: print("Key : ",key," is not present.") flag += 1 break elif tableq[hash]==key: print("Key : ",key," is present at location : ",hash) flag += 1 break if flag == 0: print("Key : ",key," is not present.") #printing hash table def printtable(b): print("Linearly Probed Table :") for i in range(b): print(table[i],end="|") print("\nQuadratically Probed Table :") for i in range(b): print(tableq[i],end="|") print("")
b = int(input("Enter the table size : ")) create(b) while(1): ch = int(input("\n1-Linear Probing \n2-Quadratic Probing \n3-EXIT \nEnter your choice: ")) # linear pobing if ch==1: while(1): ch2 = int(input("1-Insert \n2-Search \n3-Back \n4-Print tables \nEnter your choice: ")) if ch2==1: if totl==b: print("The table is already full . ") else: key = int(input("Enter the key to be inserted in the table : ")) linsert(key,b) elif ch2==2: key = int(input("Enter the key to be searched in the table : ")) lsearch(key,b) elif ch2==3: print("GOING BACK") break elif ch2==4: print("----------Table----------") printtable(b)
# Quadratic probing elif ch==2: while(1): ch2 = int(input("1-Insert \n2-Search \n3-Back \n4-Print tables \nEnter your choice: ")) if ch2==1: if totq==b: print("The table is already full . ") else: key = int(input("Enter the key to be inserted in the table : ")) qinsert(key,b) elif ch2==2: key = int(input("Enter the key to be searched in the table : "))
qsearch(key,b) elif ch2==3: print("GOING BACK") break elif ch2==4: print("---------------Table------------------") printtable(b) # exit elif ch==3: print("EXITED") printtable(b) break else: print("Wrong choice!")
